<?php

namespace Drupal\dog_library;

use Drupal\Component\Utility\Crypt;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Cache\CacheableDependencyInterface;
use Drupal\Core\Site\Settings;
use Symfony\Component\HttpFoundation\ParameterBag;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpKernel\Exception\BadRequestHttpException;

/**
 * A value object for the resource library state.
 *
 * When the resource library is opened it needs several parameters to work
 * properly. These parameters are normally extracted from the current URL, then
 * retrieved from and managed by the LibraryState value object. The
 * following parameters are required in order to open the resource library:
 * - resource_library_opener_id: The ID of a container service which is
 *   responsible for interacting with the resource library on behalf of the
 *   "thing" (e.g., a field widget or text editor button) which opened it.
 * - resource_library_allowed_types: The resource types available in the library
 *   can be restricted to a list of allowed types.
 * - resource_library_remaining: When the opener wants to limit the amount of
 *   resource items that can be selected, it can pass the number of remaining
 *   slots. When the number of remaining slots is a negative number, an
 *   unlimited amount of items can be selected.
 *
 * This object can also carry an optional opener-specific array of arbitrary
 * values, under the library_opener_parameters key. These values are
 * included in the hash generated by ::getHash(), so the end user cannot tamper
 * with them either.
 *
 * @package Drupal\dog_library
 */
class ResourceLibraryState extends ParameterBag implements CacheableDependencyInterface {

  /**
   * {@inheritdoc}
   */
  public function __construct(array $parameters = []) {
    $this->validateRequiredParameters($parameters['resource_library_opener_id'], $parameters['resource_library_allowed_types'], $parameters['resource_library_remaining']);
    $parameters += [
      'resource_library_opener_parameters' => [],
    ];
    parent::__construct($parameters);
    $this->set('hash', $this->getHash());
  }

  /**
   * Validates the required parameters for a new ResourceLibraryState object.
   *
   * @param string $opener_id
   *   The resource library opener service ID.
   * @param string[] $allowed_type_ids
   *   The allowed resource type IDs.
   * @param int $remaining_slots
   *   The number of remaining items the user is allowed to select or add in the
   *   library.
   *
   * @throws \InvalidArgumentException
   *   If one of the passed arguments is missing or does not pass the
   *   validation.
   */
  protected function validateRequiredParameters($opener_id, array $allowed_type_ids, $remaining_slots) {
    // The opener ID must be a non-empty string.
    if (!is_string($opener_id) || empty(trim($opener_id))) {
      throw new \InvalidArgumentException('The opener ID parameter is required and must be a string.');
    }

    // The allowed resource type IDs must be an array of non-empty strings.
    if (empty($allowed_type_ids) || !is_array($allowed_type_ids)) {
      throw new \InvalidArgumentException('The allowed types parameter is required and must be an array of strings.');
    }
    foreach ($allowed_type_ids as $allowed_type_id) {
      if (!is_string($allowed_type_id) || empty(trim($allowed_type_id))) {
        throw new \InvalidArgumentException('The allowed types parameter is required and must be an array of strings.');
      }
    }

    // The remaining slots must be numeric.
    if (!is_numeric($remaining_slots)) {
      throw new \InvalidArgumentException('The remaining slots parameter is required and must be numeric.');
    }
  }

  /**
   * Get the hash for the state object.
   *
   * @return string
   *   The hashed parameters.
   */
  public function getHash() {
    // Create a hash from the required state parameters and the serialized
    // optional opener-specific parameters. Sort the allowed types and
    // opener parameters so that differences in order do not result in
    // different hashes.
    $allowed_type_ids = array_values($this->getAllowedTypeIds());
    sort($allowed_type_ids);
    $opener_parameters = $this->getOpenerParameters();
    ksort($opener_parameters);
    $hash = implode(':', [
      $this->getOpenerId(),
      implode(':', $allowed_type_ids),
      $this->getAvailableSlots(),
      serialize($opener_parameters),
    ]);

    return Crypt::hmacBase64(
      $hash, \Drupal::service('private_key')->get() . Settings::getHashSalt()
    );
  }

  /**
   * Returns the resource type IDs which can be selected.
   *
   * @return string[]
   *   The resource type IDs.
   */
  public function getAllowedTypeIds() {
    return $this->all('resource_library_allowed_types');
  }

  /**
   * Returns all opener-specific parameter values.
   *
   * @return array
   *   An associative array of all opener-specific parameter values.
   */
  public function getOpenerParameters() {
    return $this->all('resource_library_opener_parameters');
  }

  /**
   * Returns the ID of the resource library opener service.
   *
   * @return string
   *   The resource library opener service ID.
   */
  public function getOpenerId() {
    return $this->get('resource_library_opener_id');
  }

  /**
   * Returns the number of additional resource items that can be selected.
   *
   * When the value is not available in the URL the default is 0. When a
   * negative integer is passed, an unlimited amount of resource items can be
   * selected.
   *
   * @return int
   *   The number of additional resource items that can be selected.
   */
  public function getAvailableSlots() {
    return $this->getInt('resource_library_remaining');
  }

  /**
   * Get the resource library state from a request.
   *
   * @param \Symfony\Component\HttpFoundation\Request $request
   *   The request.
   *
   * @return static
   *   A state object.
   *
   * @throws \Symfony\Component\HttpKernel\Exception\BadRequestHttpException
   *   Thrown when the hash query parameter is invalid.
   */
  public static function fromRequest(Request $request) {
    $query = $request->query;

    // Create a LibraryState object through the create method to make sure
    // all validation runs.
    $state = static::create(
      $query->get('resource_library_opener_id'),
      $query->all('resource_library_allowed_types'),
      $query->get('resource_library_remaining'),
      $query->all('resource_library_opener_parameters')
    );

    // The request parameters need to contain a valid hash to prevent a
    // malicious user modifying the query string to attempt to access
    // inaccessible information.
    if (!$state->isValidHash($query->get('hash'))) {
      throw new BadRequestHttpException("Invalid resource library parameters specified.");
    }

    // Once we have validated the required parameters, we restore the parameters
    // from the request since there might be additional values.
    $state->replace($query->all());
    return $state;
  }

  /**
   * Creates a new LibraryState object.
   *
   * @param string $opener_id
   *   The opener ID.
   * @param string[] $allowed_type_ids
   *   The allowed resource type IDs.
   * @param int $remaining_slots
   *   The number of remaining items the user is allowed to select or add in the
   *   library.
   * @param array $opener_parameters
   *   (optional) Any additional opener-specific parameter values.
   *
   * @return static
   *   A state object.
   */
  public static function create($opener_id, array $allowed_type_ids, $remaining_slots, array $opener_parameters = []) {
    $state = new static([
      'resource_library_opener_id' => $opener_id,
      'resource_library_allowed_types' => $allowed_type_ids,
      'resource_library_remaining' => $remaining_slots,
      'resource_library_opener_parameters' => $opener_parameters,
    ]);
    return $state;
  }

  /**
   * Validate a hash for the state object.
   *
   * @param string $hash
   *   The hash to validate.
   *
   * @return bool
   *   The hashed parameters.
   */
  public function isValidHash($hash) {
    return hash_equals($this->getHash(), $hash);
  }

  /**
   * Determines if additional resource items can be selected.
   *
   * @return bool
   *   TRUE if additional items can be selected, otherwise FALSE.
   */
  public function hasSlotsAvailable() {
    return $this->getAvailableSlots() !== 0;
  }

  /**
   * {@inheritdoc}
   */
  public function getCacheContexts() {
    return ['url.query_args'];
  }

  /**
   * {@inheritdoc}
   */
  public function getCacheMaxAge() {
    return Cache::PERMANENT;
  }

  /**
   * {@inheritdoc}
   */
  public function getCacheTags() {
    return [];
  }

}
